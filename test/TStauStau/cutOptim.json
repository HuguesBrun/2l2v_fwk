{
  "optim":[
    {
      "comment":"This is a comment, it is presented as a normal JSON tag but the cut optimization parser will explicitly ignore this section",
      "comment":"This section, that starts with the { and ends with the } is an optimization round, several optimization rounds can be defined with different options, variables and even be performed on specific channels",
      "comment":"This section defines the variables for cut optimization and other accessory information",
      "name":"Round1",
      "comment":"the name field is self explanatory, ie the name of the round",
      "iLumi":18893,
      "comment":"the iLumi field should contain the integrated luminosity, this should not affect the result unless a data driven background is being used",
      "inDir":"/lustre/ncg.ingrid.pt/cmslocal/cbeiraod/IPM_selection/",
      "comment":"the inDir field should contain the directory where the summary trees may be found",
      "jsonFile":"tstaustau_samples_exclusive_2012B.json",
      "comment":"the jsonFile field should contain the json file describing the processes and samples to use. It should be the same file given to runPlotter for instance",
      "ttree":"Events",
      "comment":"the ttree field should contain the name of the ttree where the variables are kept",
      "customExtension":"_summary",
      "comment":"the customExtension field should contain any additional extension to the name of the file where the ttree is located",
      "baseSelection":"selected",
      "comment":"the baseSelection field should contain the base selection of the events in the tree, this must be a valid expression in ROOT",
      "signalSelection":"(stauMass-neutralinoMass)==100",
      "comment":"the signalSelection field should contain any other selection that should be made only on the signal samples, in addition to the base selection",
      "pointVariable":"stauMass*1000+neutralinoMass",
      "signalPoint":"stauMass==110&&neutralinoMass==10",
      "sigCrossSection":0.0755,
      "nInitEvents":10000,
      "comment":"For signal types where multiple signal points are within the same sample, other methods have to be used for normalization, define here the cross section and initial number of events per signal point. If you are using a different type of signal (a single sample per signal point for instance) place nInitEvents to a negative number and put some placeholder value in sigCrossSection",
      "userCuts":[
        {
          "variable":"MT2",
          "direction":"above",
          "value":90,
          "comment":"The above definition means we have a user defined cut that uses the MT2 variable (which is defined in the variables section) and we will perform the following cut: MT2>90"
        }
      ],
      "variables":[
        {
          "name":"MET",
          "comment":"the name field should contain the name of the variable, this name will be shown on plots/tables",
          "expression":"met.Et()",
          "comment":"the expression field should contain how the variable is calculated (once again, it must be a valid ROOT expression), at the moment, this is the only way of defining variables, thus it restricts us to either direct variables in the tree or variables with simple expressions obtained from those in the tree",
          "minVal":0,
          "maxVal":300,
          "step":10,
          "comment":"the fields minVal, maxVal and step, as their names imply, control how the scan itself is performed, they also control the ranges for the plots",
          "label":"MET",
          "comment":"the label field holds the value that will be printed on the plots, ie it can contain valid LaTeX commands in root for nicer output"
        },
        {
          "name":"lepLeadPt",
          "expression":"lepLeadPt",
          "minVal":0,
          "maxVal":200,
          "step":10,
          "label":"p_{T}(l)"
        },
        {
          "name":"tauLeadPt",
          "expression":"tauLeadPt",
          "minVal":0,
          "maxVal":200,
          "step":10,
          "label":"p_{T}(#tau)"
        },
        {
          "name":"SVFit",
          "expression":"abs(SVFitMass-95)",
          "minVal":0,
          "maxVal":300,
          "step":10,
          "label":"M_{SVFit}"
        },
        {
          "name":"METvsPTlep",
          "expression":"met.Et()+lepLeadPt",
          "minVal":0,
          "maxVal":300,
          "step":10,
          "label":"MET vs P_{T}(lep)"
        },
        {
          "name":"METvsPTtau",
          "expression":"met.Et()+tauLeadPt",
          "minVal":0,
          "maxVal":300,
          "step":10,
          "label":"MET vs P_{T}(#tau)"
        },
        {
          "name":"MT2",
          "expression":"MT2",
          "minVal":0,
          "maxVal":180,
          "step":5,
          "label":"M_{T2}"
        },
        {
          "name":"deltaAlphaTauLep",
          "expression":"abs(deltaAlphaTauTau)",
          "minVal":0,
          "maxVal":3.14,
          "step":0.1,
          "label":"#Delta#alpha_{#tau-l}(Lab)"
        },
        {
          "name":"deltaPhiTauLepMET",
          "expression":"abs(deltaPhiTauTauMET)",
          "minVal":0,
          "maxVal":3.14,
          "step":0.1,
          "label":"#Delta#phi_{#taul-MET}(Lab)"
        },
        {
          "name":"deltaPhiTauLep",
          "expression":"abs(deltaPhiTauTau)",
          "minVal":0,
          "maxVal":3.14,
          "step":0.1,
          "label":"#Delta#phi_{#tau-l}(Lab)"
        },
        {
          "name":"cosThetaLep",
          "expression":"abs(cosThetaTauL)",
          "minVal":0,
          "maxVal":1,
          "step":0.05,
          "label":"cos#theta_{l}"
        },
        {
          "name":"cosThetaTau",
          "expression":"abs(cosThetaTauH)",
          "minVal":0,
          "maxVal":1,
          "step":0.05,
          "label":"cos#theta_{#tau}"
        }
      ],
      "comment":"the variables field should contain the list of variables on which to perform optimization",
    }
  ]
}
